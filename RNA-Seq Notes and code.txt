heterogenical changes across generations
fastq
fastQC
trimometric
clean.fq.za
reference transcriptome (Trinity)
Refifa (some reference needed for gene expression pipeline)
Salmon (count txt)
DE Seq2

-Gene expression data (counts) salmon
-Variance/frequency zone (position and map) 


acidification ah f2
import file
Fastqc report
basic statistics
check what to clip (adapter clipping)
buttons at the left gives you an indication of what to trim
kimer content ( trim adapter)

fastqc AH_F2*.fq.gz --outdir=/data/project_data/RNAseq/fastqc/

java -classpath /data/popgen/Trimmomatic-0.39/trimmomatic-0.39.jar org.usadellab.trimmomatic.TrimmomaticPE \
        -threads 10 \ 
        -phred33 \
         "$f1" \
         "$f2" \
         /data/project_data/RNAseq/cleandata/"$f1"_left_clean_paired.fq \
         /data/project_data/RNAseq/cleandata/"$f1"_left_clean_unpaired.fq \
         /data/project_data/RNAseq/cleandata/"$f2"_right_clean_paired.fq \
         /data/project_data/RNAseq/cleandata/"$f2"_right_clean_unpaired.fq \
        ILLUMINACLIP:/data/popgen/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 \ =cut off all that matches this adapter
        LEADING:20 \
        TRAILING:20 \
        SLIDINGWINDOW:6:20 \
        MINLEN:36  =minimum length
>> log.txt

cd /data/project_data/RNAseq/rawdata

vim textscript

#!/bin/bash

wr!

cd /data/project_data/RNAseq/cleandata
fastqc FILENAME*.fq.gz --outdir=/data/project_data/RNAseq/fastqc/  (file name = AH-F2)


visualization
%dups enriching a particular fragment. (can be flagged and excluded) 
unique reads and duplicate reads

2021/10/06
1. Quality control (fastq)
2. Trinity for transcriptome assembly (ram)
3. fastq and transcriptome assembly to map align but use Star if you have genome
3.1 salmon = alignment tree mapping (kmer)
3.2 Traditional alignment = (sam) bwa, bowtie 2
4. counts/quantification =DESeq2 (EdgeR)




R Work
1.Installed

Set working directory

## Import the libraries that we're likely to need in this session
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")

# Import the counts matrix 
countsTable <- read.table("DE_counts_F3.txt", header=TRUE, row.names=1)

#Assesment
head(countsTable) # First few rows
dim(countsTable) #25279 16


countsTableRound <- round(countsTable) #DESeq2 doesn't like decimals so the values were converted to no decimal values
head(countsTableRound)

#import the sample discription table
conds <- read.delim("RT_tonsa_F3_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds) #Assessed


# Assess number of reads per sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)

# Check the average number of counts per gene
rowSums(countsTableRound)
mean(rowSums(countsTableRound)) 
median(rowSums(countsTableRound)) 

apply(countsTableRound,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRound,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRound,1,mean),xlim=c(50000,150000), ylim=c(0,10),breaks=1000)


# Created a pet file DeSeq (used interaction conditions in the design formula)

dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds, 
                              design= ~ line + environment + line:environment)

dim(dds)

# Quality control: keep reads with average > 10 reads per sample
dds <- dds[rowSums(counts(dds)) >160]
dim(dds)

# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)

# Viewed results
resultsNames(dds)
# [1] "Intercept"                  "line_combined_vs_ambient"   "environment_HH_vs_AA"      
# [4] "linecombined.environmentHH"

# Used a PCA to visualize global gene expression patterns
vsd <- vst(dds, blind=FALSE)

data <- plotPCA(vsd, intgroup=c("line","environment"), returnData=TRUE)
percentVar <- round(100 * attr(data,"percentVar"))

ggplot(data, aes(PC1,PC2, color=environment, shape=line)) +
  geom_point(size=4, alpha=0.85) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) +
  theme_minimal()

resInteraction <- results(dds, alpha=0.05)
resInteraction <- resInteraction[order(resInteraction$padj),]
head(resInteraction)
summary(resInteraction)

Tested for response on environmental condition

dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, 
                              design = ~ line + environment)

dds <- DESeq(dds, test="LRT", reduced=~line)

# Show results
resultsNames(dds)

# Order and list and summarize results from specific contrasts
resEnv <- results(dds, alpha = 0.05)
resEnv <- resEnv[order(resEnv$padj),]
head(resEnv)

summary(resEnv)

resEnv <- resEnv[!is.na(resEnv$padj),]

degsEnv <- row.names(resEnv[resEnv$padj < 0.05,]) 

# Test for effect on line

dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, 
                              design = ~ environment + line)

dds <- DESeq(dds, test="LRT", reduced=~environment)
resultsNames(dds)

resLine <- results(dds, alpha = 0.05)
resLine <- resLine[order(resLine$padj),]
head(resLine)


summary(resLine)


resLine <- resLine[!is.na(resLine$padj),]

degsline <- row.names(resLine[resLine$padj < 0.05,])
Now test for an interaction:
  
Test for interactions

dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, 
                              design = ~ environment + line + environment:line)

dds <- DESeq(dds, test="LRT", reduced=~environment + line)
resultsNames(dds)

resInt <- results(dds, alpha = 0.05)
resInt <- resInt[order(resInt$padj),]
head(resInt)

summary(resInt)


resInt <- resInt[!is.na(resInt$padj),]

degsInt <- row.names(resInt[resInt$padj < 0.05,])

# Plot Individual genes 

# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="TRINITY_DN138549_c1_g2", intgroup = (c("line","environment")), returnData=TRUE)
d

p <-ggplot(d, aes(x=environment, y=count, color=line, shape=line, group=line)) + 
  theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.2,h=0), size=3)
p <- p + stat_summary(fun = mean, geom = "line")
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7) 
p

# PLOT OVERLAPPING DEGS IN VENN DIAGRAM

library(eulerr)

# Total
length(degsEnv)  
length(degsline)  
length(degsInt)  

# Intersections
length(intersect(degsEnv,degsline))  
length(intersect(degsEnv,degsInt))  
length(intersect(degsInt,degsline))  

intEL <- intersect(degsEnv,degsline)
length(intersect(degsInt,intEL))  


fit1 <- euler(c("Env" = 360, "Line" = 148, "Interaction" = 3769, "Env&Line" = 37, "Env&Interaction" = 44, "Line&Interaction" = 34, "Env&Line&Interaction" = 7))

plot(fit1,  lty = 1:3, quantities = TRUE)

plot(fit1, quantities = TRUE, fill = "transparent",
     lty = 1:3,
     labels = list(font = 4))

# Heatmap of top 20 genes sorted by pvalue

library(pheatmap)

# By environment

topgenes <- head(rownames(resInt),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("line","environment")])
pheatmap(mat, annotation_col=df)

# By line

topgenes <- head(rownames(resLine),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("line","environment")])
pheatmap(mat, annotation_col=df)







