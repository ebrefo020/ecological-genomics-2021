{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red69\green97\blue111;\red240\green244\blue249;}
{\*\expandedcolortbl;;\cssrgb\c33725\c45490\c50980;\cssrgb\c95294\c96471\c98039;}
\margl1440\margr1440\vieww28600\viewh16880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 plink2.mean_cGDDfreeze.glm.linear\
\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
CHR="Chr07\'94\
\
echo $CHR  # Does it look right?\
\
cd /data/project_data/PopGenomics/shared/$\{CHR\}_sweeps/LAI/\
\
# Get phenotype data from meta file for the admixed samples:  climate data\
\
tail -n +2 /data/project_data/PopGenomics/climDat.txt | \\\
grep -w -f Admixed.Inds - >Admixed.clim\
\
printf "#FID\\tIID\\tmean_finalFreeze\\tmean_cGDDfreeze\\tmed_DDO\\n%.0s" >Plink/clim.forPlink\
\
cat Admixed.clim >>Plink/clim.forPlink\
\
# Get K=2 ADMIX to use as covariate; Need to use tail -n +2 to skip the header in the metadata file before pasting to the Q file\
\
tail -n +2 /data/project_data/PopGenomics/Combined_Transect_Sampling_Data_2020.txt | \\\
cut -f1 | \\\
paste - /data/project_data/PopGenomics/shared/poplar_hybrids.LDpruned.5.Q | \\\
grep -w -f Admixed.Inds - | \\\
sed 's/\\s/\\t/g' | \\\
cut -f 1,5 >Plink/Admixed_KBals\
\
cat /data/project_data/PopGenomics/Combined_Transect_Sampling_Data_2020.txt | \\\
cut -f1-2 | \\\
grep -w -f Admixed.Inds - | \\\
sed 's/\\s/\\t/g' | \\\
cut -f2 >Plink/Transect\
\
# Create the cov file with KBals\
\
printf "#FID\\tIID\\tK2Q\\n%.0s" >Plink/cov.forPlink\
paste Plink/Transect Plink/Admixed_KBals >>Plink/cov.forPlink\
\
\
# Get K=2 ADMIX to use as covariate; Need to use tail -n +2 to skip the header in the metadata file before pasting to the Q file\
\
tail -n +2 /data/project_data/PopGenomics/Combined_Transect_Sampling_Data_2020.txt | \\\
cut -f1 | \\\
paste - /data/project_data/PopGenomics/shared/poplar_hybrids.LDpruned.5.Q | \\\
grep -w -f Admixed.Inds - | \\\
sed 's/\\s/\\t/g' | \\\
cut -f 1,5 >Plink/Admixed_KBals\
\
cat /data/project_data/PopGenomics/Combined_Transect_Sampling_Data_2020.txt | \\\
cut -f1-2 | \\\
grep -w -f Admixed.Inds - | \\\
sed 's/\\s/\\t/g' | \\\
cut -f2 >Plink/Transect\
\
# Create the cov file with KBals\
\
printf "#FID\\tIID\\tK2Q\\n%.0s" >Plink/cov.forPlink\
paste Plink/Transect Plink/Admixed_KBals >>Plink/cov.forPlink\
\
\
cd Plink/\
\
plink2 --bfile $\{CHR\}_Admixed_FAI \\\
--pheno pheno.forPlink \\\
--covar clim.forPlink \\\
--glm omit-ref\
\
\
plink2 --bfile $\{CHR\}_Admixed_FAI \\\
--pheno clim.forPlink \\\
--covar cov.forPlink \\\
--glm omit-ref\
\
\
\
#hwk 3 \
library(ggplot2)\
library(gridExtra)\
library(ggbiplot)\
library(GenomicRanges)\
library(GenomicFeatures)\
library(ggplot2)\
library(gridExtra) \
library(ggplot2)\
 if (!requireNamespace("BiocManager", quietly = TRUE))\
   install.packages("BiocManager")\
BiocManager::install("GenomicRanges")\
BiocManager::install("GenomicFeatures")\
\
library(GenomicRanges)\
library(GenomicFeatures)\
\
setwd("~/Documents/UVM/Pbio381/HOMEWORK 3")\
\
# Read in list of positions\
snps2 <- read.table("Chr07.kept.sites",sep="\\t", header=T)\
\
# Read in the local ancestry frequencies from Plink\
AF2 <- read.table("Chr07_LAI_freq.afreq", skip=1,sep="\\t",header=F)  \
\
# Note the skip=1 here.  \
# This skips the first line, since Plink's header line doesn't play well with R.  \
# We'll define our own header line below.\
\
names(AF2) = c("CHROM",  "ID",   "REF",  "ALT",  "ALT_FREQS",    "OBS_CT")\
\
AF3 <- cbind(snps2,AF2)\
\
str(AF3) # How does it look?\
\
# A simple plot:\
\
pa <- ggplot(AF3[,-3],aes(x=POS,y=ALT_FREQS)) +\
  geom_line(size=0.25, color="blue") + \
  xlab("Position (bp) along chromosome") +\
  ylab("Frequency P. trichocarpa ancestry")\
\
pa\
# Get the list of admixed individuals:\
Admixed <- read.table("Admixed.Inds",header=F)\
\
# Get the meta data:\
meta <- read.table("Combined_Transect_Sampling_Data_2020.txt", sep="\\t",header=T)\
\
# merge them together:\
meta_admx <- merge(meta, Admixed, by.x="ID", by.y="V1")\
str(meta_admx)  \
\
# Read in the Admixture coefficients for KBals that we made from the K=5 file:\
KBals <- read.table("Admixed_KBals", sep="\\t", header=F)\
names(KBals) = c("ID","KBals")\
\
# Second merge:\
meta_admx_KBals <- merge(meta_admx,KBals,by="ID")\
\
\
# Bring in phenotype data:\
pheno <- read.table("VT_Garden_Phenotypes_2021.txt",sep="\\t",header=T)\
clim <- read.table("climDat.txt",sep="\\t",header=T)\
\
# Merge pheno data with meta and KBals:\
meta_admx_KBals_clim <- merge(meta_admx_KBals,clim,by="ID")\
meta_admx_KBals_cp <- merge(meta_admx_KBals_clim,pheno,by="ID")\
# This is the average date of the last freezing event in spring, after which temperatures stay above 0C for the rest of the growing season.\
plotmean <- ggplot(meta_admx_KBals_cp,aes(x=KBals,y=mean_finalFreeze, color=Transect.x, ellipse = TRUE)) +\
  geom_point(size=2) +\
  xlab("Proportion P. balsamifera ancestry") +\
  ylab("final freeze") \
\
plotmean\
\
# This is the average number of growing degree days (a measure of spring warming) that accumulate from Jan01 to the date of last freeze in spring.\
plotgdd <- ggplot(meta_admx_KBals_cp,aes(x=KBals,y=mean_cGDDfreeze, color=Transect.x)) +\
  geom_point(size=2) + \
  xlab("Proportion P. balsamifera ancestry") +\
  ylab("mean_cGDDfreeze") \
\
plotgdd\
\
#This is the mean number of chilling degree days across the year.  Chilling degree days are thought to be a cue that plants use to determine how much winter they\'92ve passed through, which can be used to decide when to break dormancy (flush).\
plotmed_DD0 <- ggplot(meta_admx_KBals_cp,aes(x=KBals,y=med_DD0, color=Transect.x)) +\
  geom_point(size=2) + \
  xlab("Proportion P. balsamifera ancestry") +\
  ylab("med_DD0") \
#individuals with trichocarp ancestry take longer in spring to break bud, higher balsamifera== earlier\
#populations that have evolved under warmer climates require more heat to bud\
#natural pops in warm know that they can get a few warm days even in winter\
plotmed_DD0\
# Bud flush\
plotBudflush <- ggplot(meta_admx_KBals_cp,aes(x=KBals,y=FLUSH, color=Transect.x)) +\
  geom_point(size=2) + \
  xlab("Proportion P. balsamifera ancestry") +\
  ylab("Bud flush") \
#individuals with trichocarp ancestry take longer in spring to break bud, higher balsamifera== earlier\
#populations that have evolved under warmer climates require more heat to bud\
#natural pops in warm know that they can get a few warm days even in winter\
plotBudflush\
\
grid.arrange(plotmed_DD0, plotmean, plotgdd, plotBudflush, nrow = 4)\
#bud set for trait\
budflush <- read.table("plink2.FLUSH.glm.linear",skip=1,sep="\\t",header=F)\
names(budflush) = c("CHROM",    "POS",  "ID",   "REF",  "ALT",  "A1",   "TEST", "OBS_CT",   "BETA", "SE",   "T_STAT",   "P")\
budflush <- budflush[which(budflush$TEST=="ADD"),]\
budflush2 <- cbind(snps, budflush[,-c(1,2)])\
budflush2$outlier = ifelse(budflush2$P<quantile(budflush2$P,0.01),2,1)\
#regressions for each of these plots\
# linear models testing trait ~ genome-wide admixture association\
#mean final freeze\
summary(lm(mean_finalFreeze~KBals + Transect.x, data=meta_admx_KBals_cp))\
\
summary(lm(mean_cGDDfreeze~KBals + Transect.x, data=meta_admx_KBals_cp))\
\
summary(lm(med_DD0~KBals + Transect.x, data=meta_admx_KBals_cp))\
\
lm(formula = med_DD0 ~ KBals + Transect.x, data = meta_admx_KBals_cp)\
\
# What about the effects of local ancestry within the genome, after controlling for genome-wide ancestry effects as a covariate in the GLM model?\
\
######  Bring in Association results from Plink   ######\
\
## ffreeze\
ffreeze <- read.table("plink2.mean_finalFreeze.glm.linear",skip=1,sep="\\t",header=F)\
names(ffreeze) = c("CHROM",    "POS",  "ID",   "REF",  "ALT",  "A1",   "TEST", "OBS_CT",   "BETA", "SE",   "T_STAT",   "P")\
ffreeze2 <- ffreeze[which(ffreeze$TEST=="ADD"),]\
head(ffreeze2)\
ffreeze2 <- cbind(snps, ffreeze2[,-c(1:2)])\
ffreeze2$outlier = ifelse(ffreeze2$P<quantile(ffreeze2$P,0.01),2,1) #upper .1% \
\
\
# GDD\
cGDDfreeze <- read.table("plink2.mean_cGDDfreeze.glm.linear",skip=1,sep="\\t",header=F)\
names(cGDDfreeze) = c("CHROM",    "POS",  "ID",   "REF",  "ALT",  "A1",   "TEST", "OBS_CT",   "BETA", "SE",   "T_STAT",   "P")\
cGDDfreeze2 <- cGDDfreeze[which(cGDDfreeze$TEST=="ADD"),]\
head(cGDDfreeze2)\
cGDDfreeze2 <- cbind(snps, cGDDfreeze2[,-c(1:2)])\
cGDDfreeze2$outlier = ifelse(cGDDfreeze2$P<quantile(cGDDfreeze2$P,0.01),2,1)\
\
# med DD0  \
dd0 <- read.table("plink2.med_DDO.glm.linear",skip=1,sep="\\t",header=F)\
names(dd0) = c("CHROM",    "POS",  "ID",   "REF",  "ALT",  "A1",   "TEST", "OBS_CT",   "BETA", "SE",   "T_STAT",   "P")\
dd0 <- dd0[which(dd0$TEST=="ADD"),]\
dd02 <- cbind(snps, dd0[,-c(1,2)])\
dd02$outlier = ifelse(dd02$P<quantile(dd02$P,0.01),2,1)\
\
\
\
p1 <- ggplot(ffreeze2,aes(x=POS,y=-1*log10(P))) +\
  geom_point(size=ffreeze2$outlier, color=ffreeze2$outlier) + \
  xlab("Position (bp) along chromosome") +\
  ylab("-log10 P-value") +\
  ggtitle("final freeze")\
\
p1\
\
p2 <- ggplot(cGDDfreeze2,aes(x=POS,y=-1*log10(P))) +\
  geom_point(size=cGDDfreeze2$outlier, color=cGDDfreeze2$outlier) + \
  xlab("Position (bp) along chromosome") +\
  ylab("-log10 P-value") +\
  ggtitle("gdd")\
\
p2\
\
\
p3 <- ggplot(dd02,aes(x=POS,y=-1*log10(P))) +\
  geom_point(size=dd02$outlier, color=dd02$outlier) + \
  xlab("Position (bp) along chromosome") +\
  ylab("-log10 P-value") +\
  ggtitle("dd0")\
\
p3\
\
\
budflush <- read.table("plink2.FLUSH.glm.linear",skip=1,sep="\\t",header=F)\
names(budflush) = c("CHROM",    "POS",  "ID",   "REF",  "ALT",  "A1",   "TEST", "OBS_CT",   "BETA", "SE",   "T_STAT",   "P")\
budflush <- budflush[which(budflush$TEST=="ADD"),]\
budflush2 <- cbind(snps, budflush[,-c(1,2)])\
budflush2$outlier = ifelse(budflush2$P<quantile(budflush2$P,0.01),2,1)\
\
\
p4 <- ggplot(budflush2,aes(x=POS,y=-1*log10(P))) +\
  geom_point(size=budflush2$outlier, color=budflush2$outlier) + \
  xlab("Position (bp) along chromosome") +\
  ylab("-log10 P-value") +\
  ggtitle("bud flush")\
\
p4\
grid.arrange(p1, p2, p3, p4, nrow = 4)\
\
# p5 <- ggplot(betas,aes(x=beta_ffreeze,y=beta_budflush)) +\
#   geom_point(color="darkgray") + \
#   xlab("first freeze") +\
#   ylab("bud flush") +\
#   ggtitle("Correlation of first freeze and bud flush")\
# p5\
# \
# p6 <- ggplot(betas,aes(x=beta_gdd,y=beta_flush)) +\
#   geom_point(color="darkgray") + \
#   xlab("gdd") +\
#   ylab("bud flush") +\
#   ggtitle("Correlation of gdd and bud flush")\
# \
# p6\
# \
# p7 <- ggplot(betas,aes(x=beta_dd0,y=beta_flush)) +\
#   geom_point(color="darkgray") + \
#   xlab("dd0") +\
#   ylab("bud flush") +\
#   ggtitle("Correlation of dd0 and bud flush")\
# \
# p7\
\
#genomic ranges\
\
# Calculate Genomic Ranges for outlier bins\
\
CHR="Chr07" \
# Customize to your chromosome.  Make sure syntax is exact!\
#define ya windows:\
#POS : which is the SNP being tested, also the center of the window\
#P which is the pvalue for the association test\
#outlier : outlier status\
budflushGR <- GRanges(CHR,IRanges(budflush2$POS-2.5e4,budflush2$POS+2.5e4),POS=budflush2$POS, P=budflush2$P, outlier=budflush2$outlier)\
#final freeze\
ffreezeGR <- GRanges(CHR,IRanges(ffreeze2$POS-2.5e4,ffreeze2$POS+2.5e4),POS=ffreeze2$POS, P=ffreeze2$P, outlier=ffreeze2$outlier)\
#dd0\
dd0GR <- GRanges(CHR,IRanges(dd02$POS-2.5e4,dd02$POS+2.5e4),POS=dd02$POS, P=dd02$P, outlier=dd02$outlier)\
#gdd\
gddGR <- GRanges(CHR,IRanges(cGDDfreeze2$POS-2.5e4,cGDDfreeze2$POS+2.5e4),POS=cGDDfreeze2$POS, P=cGDDfreeze2$P, outlier=cGDDfreeze2$outlier)\
\
#reduced windows to capture outlier regions\
#budflush\
budflushGRout <- unlist(reduce(split(budflushGR, ~outlier)))\
budflushGRout$outlier <- names(budflushGRout)\
budflushGRCand <- subset(budflushGRout, outlier==2)\
\
budflushGRCand # Print the candidate regions\
#ffreeze\
ffreezeGRout <- unlist(reduce(split(ffreezeGR, ~outlier))) \
ffreezeGRout$outlier <- names(ffreezeGRout)\
ffreezeGRCand <- subset(ffreezeGRout, outlier==2)\
\
ffreezeGRCand # Print the candidate regions\
\
#gdd\
gddGRout <- unlist(reduce(split(gddGR, ~outlier)))\
gddGRout$outlier <- names(gddGRout)\
gddGRCand <- subset(gddGRout, outlier==2)\
\
gddGRCand # Print the candidate regions\
#dd0\
dd0GRout <- unlist(reduce(split(dd0GR, ~outlier)))\
dd0GRout$outlier <- names(dd0GRout)\
dd0GRCand <- subset(dd0GRout, outlier==2)\
\
dd0GRCand # Print the candidate regions\
\
overlap_BF_ffreeze <- subsetByOverlaps(budflushGRCand, ffreezeGRCand)\
length(overlap_BF_ffreeze)\
#1\
overlap_BF_ffreeze # Print the overlapping regions\
#overlap flush gdd\
overlap_BF_gdd <- subsetByOverlaps(budflushGRCand, gddGRCand)\
length(overlap_BF_gdd)\
#1\
overlap_BF_gdd\
#dd0\
overlap_BF_dd0 <- subsetByOverlaps(budflushGRCand, dd0GRCand)\
length(overlap_BF_dd0)\
#1\
overlap_BF_dd0\
\
# \
# overlap_ff_dd0 <- subsetByOverlaps(ffreezeGRCand, dd0GRCand)\
# length(overlap_ff_dd0)\
\
\
# #experiments\
# overlaps_cli <- subsetByOverlaps(dd0GRCand, gddGRCand)\
# length(overlaps_cli)\
# head(overlaps_cli)\
\
\
# Import the GFF annotation file and make a transcript database\
txdb <- makeTxDbFromGFF("Ptrichocarpa_533_v4.1.gene.gff3.gz", format="gff3")\
\
txdb\
\
\
\
# Subset the database for just your chromosome of interest\
seqlevels(txdb) <- CHR # subset for just your chromosome\
\
# Reduce the transcript database to just the non-redundant gene names, instead of multiple entries for all the variant transcript types per gene\
genes <- unlist(reduce(transcriptsBy(txdb, by="gene"))) \
genes$geneID <- names(genes)\
#Now we\'92ll use GenomicRanges() just like before to find the genes that overlap in the intervals of our candidate regions of overlapping lowFst/highRAiSD\
candGenesffreeze <- subsetByOverlaps(genes, overlap_BF_ffreeze)\
candGenesgdd <- subsetByOverlaps(genes, overlap_BF_gdd)\
candGenesdd0 <- subsetByOverlaps(genes, overlap_BF_dd0)\
\
candGenesgdd\
\
\
#write.table(candGenesffreeze$geneID, paste0("candGenesffreeze",CHR,".txt"), quote=F, col.names=F, row.names=F, sep=",")\
\
write.table(candGenesgdd$geneID, paste0("candGenesgdd",CHR,".txt"), quote=F, col.names=F, row.names=F, sep=",")\
#write.table(candGenesdd0$geneID, paste0("candGenesdd0",CHR,".txt"), quote=F, col.names=F, row.names=F, sep=",")\
\
}